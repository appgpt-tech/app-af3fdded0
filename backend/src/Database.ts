//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { EmployeesEntity } from './db/Employees.entity';
import { InventoryItemsEntity } from './db/InventoryItems.entity';
import { MachinesEntity } from './db/Machines.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      EmployeesEntity,
      InventoryItemsEntity,
      MachinesEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Employees: [
        {
          name: 'name 1',
          date: '2024-10-12T11:16:44.694Z',
          time: '2024-09-02T01:40:15.522Z',
          machine: 1,
          production: 1,
          frame: 1,
          stitch: 1,
          photo: 'photo 1',
          id: 67,
        },
        {
          name: 'name 2',
          date: '2023-05-23T05:52:09.845Z',
          time: '2024-06-08T00:20:40.158Z',
          machine: 2,
          production: 2,
          frame: 2,
          stitch: 2,
          photo: 'photo 2',
          id: 77,
        },
        {
          name: 'name 3',
          date: '2023-07-10T14:57:57.363Z',
          time: '2023-12-04T03:40:16.290Z',
          machine: 3,
          production: 3,
          frame: 3,
          stitch: 3,
          photo: 'photo 3',
          id: 35,
        },
        {
          name: 'name 4',
          date: '2024-12-21T19:47:11.809Z',
          time: '2023-05-13T00:39:59.557Z',
          machine: 4,
          production: 4,
          frame: 4,
          stitch: 4,
          photo: 'photo 4',
          id: 6,
        },
        {
          name: 'name 5',
          date: '2024-09-23T03:18:26.658Z',
          time: '2025-04-15T04:53:22.255Z',
          machine: 5,
          production: 5,
          frame: 5,
          stitch: 5,
          photo: 'photo 5',
          id: 67,
        },
      ],
      InventoryItems: [
        { name: 'name 1', quantity: 1, id: 29 },
        { name: 'name 2', quantity: 2, id: 48 },
        { name: 'name 3', quantity: 3, id: 76 },
        { name: 'name 4', quantity: 4, id: 11 },
        { name: 'name 5', quantity: 5, id: 81 },
      ],
      Machines: [
        {
          machineName: 'machineName 1',
          status: 'status 1',
          employee: 1,
          work: 'work 1',
          lastMaintainance: '2024-10-09T09:07:01.515Z',
          id: 2,
        },
        {
          machineName: 'machineName 2',
          status: 'status 2',
          employee: 2,
          work: 'work 2',
          lastMaintainance: '2024-06-02T08:20:14.472Z',
          id: 33,
        },
        {
          machineName: 'machineName 3',
          status: 'status 3',
          employee: 3,
          work: 'work 3',
          lastMaintainance: '2023-06-05T20:27:29.883Z',
          id: 95,
        },
        {
          machineName: 'machineName 4',
          status: 'status 4',
          employee: 4,
          work: 'work 4',
          lastMaintainance: '2025-03-16T11:30:01.982Z',
          id: 65,
        },
        {
          machineName: 'machineName 5',
          status: 'status 5',
          employee: 5,
          work: 'work 5',
          lastMaintainance: '2024-04-30T15:09:05.758Z',
          id: 30,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('EmployeesEntity', data.Employees);
      await this.SeedResource('InventoryItemsEntity', data.InventoryItems);
      await this.SeedResource('MachinesEntity', data.Machines);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
